function [pOpt,Info] = parameterEstimationRcModel(p, measuredData)
%PARAMETERESTIMATIONRCMODELPARAMSEST
%
% Solve a parameter estimation problem for the rcModelParamsEst model.
%
% The function returns estimated parameter values, pOpt,
% and estimation termination information, Info.
%
% The input argument, p, defines the model parameters to estimate,
% if omitted the parameters specified in the function body are estimated.
%
% Modify the function to include or exclude new experiments, or
% to change the estimation options.
%
% Auto-generated by SPETOOL on 29-Mar-2024 22:32:43.
%

%% Open the model.
open_system('rcModelParamsEst')

%% Specify Model Parameters to Estimate
%
if nargin < 1 || isempty(p)
    p = sdo.getParameterFromModel('rcModelParamsEst',{'c1','c2','r0','r1','r2'});
    p(1).Minimum = 0;
    p(1).Scale = 4;
    p(2).Minimum = 0;
    p(3).Minimum = 0;
    p(3).Scale = 0.015625;
    p(4).Minimum = 0;
    p(4).Scale = 0.00390625;
    p(5).Minimum = 0;
end

%% Define the Estimation Experiments
%

Exp = sdo.Experiment('rcModelParamsEst');

%%
% Specify the measured experiment output data.
Exp_Sig_Output = Simulink.SimulationData.Signal;
Exp_Sig_Output.Values    = measuredData;
Exp_Sig_Output.BlockPath = 'rcModelParamsEst/Subsystem/Add';
Exp_Sig_Output.PortType  = 'outport';
Exp_Sig_Output.PortIndex = 1;
Exp_Sig_Output.Name      = 'Vt';
Exp.OutputData = Exp_Sig_Output;

%%
% Create a model simulator from an experiment
Simulator = createSimulator(Exp);

%% Create Estimation Objective Function
%
% Create a function that is called at each optimization iteration
% to compute the estimation cost.
%
% Use an anonymous function with one argument that calls rcModelParamsEst_optFcn.
optimfcn = @(P) rcModelParamsEst_optFcn(P,Simulator,Exp);

%% Optimization Options
%
% Specify optimization options.
Options = sdo.OptimizeOptions;
Options.Method = 'lsqnonlin';
Options.OptimizedModel = Simulator;

%% Estimate the Parameters
%
% Call sdo.optimize with the estimation objective function handle,
% parameters to estimate, and options.
[pOpt,Info] = sdo.optimize(optimfcn,p,Options);

%%
% Update the experiments with the estimated parameter values.
Exp = setEstimatedValues(Exp,pOpt);

%% Update Model
%
% Update the model with the optimized parameter values.
sdo.setValueInModel('rcModelParamsEst',pOpt);
end

function Vals = rcModelParamsEst_optFcn(P,Simulator,Exp)
%RCMODELPARAMSEST_OPTFCN
%
% Function called at each iteration of the estimation problem.
%
% The function is called with a set of parameter values, P, and returns
% the estimation cost, Vals, to the optimization solver.
%
% See the sdoExampleCostFunction function and sdo.optimize for a more
% detailed description of the function signature.
%

%%
% Define a signal tracking requirement to compute how well the model
% output matches the experiment data.
r = sdo.requirements.SignalTracking(...
    'Method', 'Residuals');
%%
% Update the experiment(s) with the estimated parameter values.
Exp = setEstimatedValues(Exp,P);

%%
% Simulate the model and compare model outputs with measured experiment
% data.

F_r = [];
Simulator = createSimulator(Exp,Simulator);
strOT = mat2str(Exp.OutputData(1).Values.Time);
Simulator = sim(Simulator, 'OutputOption', 'AdditionalOutputTimes', 'OutputTimes', strOT);

SimLog = find(Simulator.LoggedData,get_param('rcModelParamsEst','SignalLoggingName'));
Sig = find(SimLog,Exp.OutputData.Name);

Error = evalRequirement(r,Sig.Values,Exp.OutputData.Values);
F_r = [F_r; Error(:)];

%% Return Values.
%
% Return the evaluated estimation cost in a structure to the
% optimization solver.
Vals.F = F_r;
end

% function Data = getData(DataID)
% %GETDATA
% %
% % Helper function to store data used by parameterEstimation_rcModelParamsEst.
% %
% % The input, DataID, specifies the name of the data to retrieve. The output,
% % Data, contains the requested data.
% %
% 
% switch DataID
%     case 'Exp_Sig_Output_Value'
%         t = [0; 0.009002164006233215; 0.1140005886554718; 0.2180032432079315; 0.3210000693798065;  ...
%             0.4230011254549026; 0.5160000175237656; 0.616995245218277; 0.7209978997707367;  ...
%             0.822003185749054; 0.9240042418241501; 1.015001535415649; 1.117998361587524;  ...
%             1.219003647565842; 1.31799727678299; 1.419002562761307; 1.519997790455818;  ...
%             1.621003076434135; 1.719996705651283; 1.823003590106964; 1.916002482175827;  ...
%             2.016997709870338; 2.118998765945435; 2.220004051923752; 2.3189976811409;  ...
%             2.423000335693359; 2.515999227762222; 2.618000283837318; 2.720001339912415;  ...
%             2.820996567606926; 2.918994426727295; 3.01700234413147; 3.115995973348618;  ...
%             3.21599543094635; 3.31999808549881; 3.419997543096542; 3.516003862023354;  ...
%             3.623003885149956; 3.723003342747688; 3.821996971964836; 3.916997462511063;  ...
%             4.021000117063522; 4.118997976183891; 4.218997433781624; 4.32099848985672;  ...
%             4.415998980402946; 4.520001634955406; 4.622002691030502; 4.724003747105598;  ...
%             4.820995777845383; 4.91500049829483; 5.017001554369926; 5.117996782064438;  ...
%             5.219997838139534; 5.317995697259903; 5.414997786283493; 5.51600307226181;  ...
%             5.614000931382179; 5.716001987457275; 5.820004642009735; 5.925003066658974;  ...
%             6.018997728824615; 6.123000383377075; 6.215999275445938; 6.322003528475761;  ...
%             6.418995559215546; 6.518995016813278; 6.620000302791595; 6.722001358866692;  ...
%             6.819999217987061; 6.919998675584793; 7.019002363085747; 7.121999189257622;  ...
%             7.222994416952133; 7.323003932833672; 7.416002824902534; 7.516002282500267;  ...
%             7.618999108672142; 7.721995934844017; 7.81499482691288; 7.916000112891197;  ...
%             8.018001168966293; 8.120997995138168; 8.222999051213264; 8.322002738714218;  ...
%             8.413995802402496; 8.517002686858177; 8.615996316075325; 8.715000003576279;  ...
%             8.817001059651375; 8.917996287345886; 9.019997343420982; 9.1210026293993;  ...
%             9.221002086997032; 9.321997314691544; 9.423002600669861; 9.516001492738724;  ...
%             9.61800254881382; 9.720003604888916; 9.821994602680206; 9.915003553032875;  ...
%             10.02099774777889; 10.13499833643436; 10.22999882698059; 10.33299565315247;  ...
%             10.43600253760815; 10.53100302815437; 10.63499562442303; 10.73100194334984;  ...
%             10.83600036799908; 10.92899926006794; 11.0330019146204; 11.1289981752634;  ...
%             11.23500242829323; 11.33099868893623; 11.4289965480566; 11.5309976041317;  ...
%             11.63000129163265; 11.73000074923038; 11.8309959769249; 11.93299703299999;  ...
%             12.02999912202358; 12.13600337505341; 12.22999803721905; 12.32799589633942;  ...
%             12.43300437927246; 12.52999641001225; 12.62699849903584; 12.73399852216244;  ...
%             12.83199638128281; 12.92800270020962; 13.03399689495564; 13.131994754076;  ...
%             13.23099844157696; 13.33000212907791; 13.43299895524979; 13.52899521589279;  ...
%             13.63299787044525; 13.73099572956562; 13.83799575269222; 13.93400207161903;  ...
%             14.03900049626827; 14.12799619138241; 14.23100307583809; 14.32999670505524;  ...
%             14.42800462245941; 14.53300304710865; 14.62699770927429; 14.73500356078148;  ...
%             14.82800245285034; 14.93300087749958];
%         y = [4.17497; 4.17497; 4.13813; 4.12462; 4.12076; 4.11883; 4.11883; 4.11818;  ...
%             4.11754; 4.11754; 4.1169; 4.1169; 4.11625; 4.11625; 4.11561; 4.11561; 4.11561;  ...
%             4.11497; 4.11497; 4.11497; 4.11432; 4.11432; 4.11432; 4.11368; 4.11368;  ...
%             4.11368; 4.11368; 4.11304; 4.11304; 4.11304; 4.11239; 4.11239; 4.11239;  ...
%             4.11175; 4.11175; 4.11175; 4.11175; 4.11111; 4.11111; 4.11111; 4.11111;  ...
%             4.11111; 4.11046; 4.11046; 4.11046; 4.11046; 4.11046; 4.10982; 4.10982;  ...
%             4.10982; 4.10982; 4.10982; 4.10918; 4.10918; 4.10918; 4.10918; 4.10918;  ...
%             4.10853; 4.10853; 4.10853; 4.10853; 4.10853; 4.10789; 4.10789; 4.10789;  ...
%             4.10789; 4.10789; 4.10725; 4.10725; 4.10725; 4.10725; 4.10725; 4.10725;  ...
%             4.1066; 4.1066; 4.1066; 4.1066; 4.1066; 4.1066; 4.10596; 4.10596; 4.10596;  ...
%             4.10596; 4.10596; 4.10596; 4.10532; 4.10532; 4.10532; 4.10532; 4.10532;  ...
%             4.10532; 4.10467; 4.10467; 4.10467; 4.10467; 4.10467; 4.10467; 4.10403;  ...
%             4.10403; 4.10403; 4.10403; 4.10403; 4.13508; 4.15117; 4.15632; 4.15825;  ...
%             4.15889; 4.15953; 4.15953; 4.15953; 4.16018; 4.16018; 4.16018; 4.16018;  ...
%             4.16082; 4.16082; 4.16082; 4.16082; 4.16082; 4.16082; 4.16146; 4.16146;  ...
%             4.16146; 4.16146; 4.16146; 4.16146; 4.16146; 4.16211; 4.16211; 4.16211;  ...
%             4.16211; 4.16211; 4.16211; 4.16211; 4.16211; 4.16211; 4.16275; 4.16275;  ...
%             4.16275; 4.16275; 4.16275; 4.16275; 4.16275; 4.16275; 4.16275; 4.16275;  ...
%             4.16275; 4.16339; 4.16339; 4.16339; 4.16339];
%         Data = timeseries(y,t);
% end
% end
